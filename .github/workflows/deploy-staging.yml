name: Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          NEXT_PUBLIC_WC_API_URL: https://agrikoph.com/wp-json/wc/v3
          WC_CONSUMER_KEY: test_key
          WC_CONSUMER_SECRET: test_secret
          ADMIN_PASSWORD_HASH: test_hash
          JWT_SECRET: test_jwt_secret_that_is_at_least_32_chars_long

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-staging
          fail_ci_if_error: false

      - name: Lint Code
        run: npm run lint

      - name: Type Check
        run: npm run type-check

      - name: Build Application (Development Mode)
        run: |
          export NODE_ENV=development
          npm run build
        env:
          NEXT_PUBLIC_WC_API_URL: https://agrikoph.com/wp-json/wc/v3
          WC_CONSUMER_KEY: staging_key
          WC_CONSUMER_SECRET: staging_secret
          ADMIN_PASSWORD_HASH: staging_hash
          JWT_SECRET: staging_jwt_secret_that_is_at_least_32_chars_long

      - name: Build Application (Production Mode)
        run: |
          export NODE_ENV=production
          export ENABLE_STATIC_EXPORT=true
          npm run build
        env:
          NEXT_PUBLIC_WC_API_URL: https://agrikoph.com/wp-json/wc/v3
          WC_CONSUMER_KEY: staging_key
          WC_CONSUMER_SECRET: staging_secret
          ADMIN_PASSWORD_HASH: staging_hash
          JWT_SECRET: staging_jwt_secret_that_is_at_least_32_chars_long

      - name: Analyze Bundle Size
        run: |
          npm run analyze
          echo "## 📊 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Build completed successfully for staging environment" >> $GITHUB_STEP_SUMMARY
        env:
          NEXT_PUBLIC_WC_API_URL: https://agrikoph.com/wp-json/wc/v3
          WC_CONSUMER_KEY: staging_key
          WC_CONSUMER_SECRET: staging_secret
          ADMIN_PASSWORD_HASH: staging_hash
          JWT_SECRET: staging_jwt_secret_that_is_at_least_32_chars_long

      - name: Security Audit
        run: |
          npm audit --audit-level=moderate || echo "⚠️  Security audit found issues"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-build-${{ github.sha }}
          path: |
            out/
            .next/
          retention-days: 7

      - name: Staging Summary
        run: |
          echo "## 🧪 Staging Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** ${{ github.event.pull_request.number || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All checks passed! Ready for production deployment." >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --json > audit-results.json || true

          # Check for critical/high vulnerabilities
          CRITICAL=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ Found $CRITICAL critical and $HIGH high vulnerabilities"
            npm audit
            exit 1
          else
            echo "✅ No critical or high vulnerabilities found"
          fi

      - name: Check for Outdated Dependencies
        run: |
          echo "📦 Checking for outdated dependencies..."
          npm outdated || echo "Some dependencies could be updated"

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build-and-test]
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-build-${{ github.sha }}

      - name: Start Test Server
        run: |
          npx serve out -p 3000 &
          sleep 10
        timeout-minutes: 2

      - name: Run Lighthouse Performance Test
        run: |
          npm install -g @lhci/cli lighthouse

          # Run lighthouse
          lighthouse http://localhost:3000 \
            --output=json \
            --output-path=lighthouse-results.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --quiet || echo "Lighthouse completed with warnings"

          # Extract scores
          if [ -f "lighthouse-results.json" ]; then
            PERFORMANCE=$(cat lighthouse-results.json | jq -r '.categories.performance.score * 100 // 0')
            ACCESSIBILITY=$(cat lighthouse-results.json | jq -r '.categories.accessibility.score * 100 // 0')
            BEST_PRACTICES=$(cat lighthouse-results.json | jq -r '.categories["best-practices"].score * 100 // 0')
            SEO=$(cat lighthouse-results.json | jq -r '.categories.seo.score * 100 // 0')

            echo "## 🚀 Performance Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Performance:** ${PERFORMANCE}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Accessibility:** ${ACCESSIBILITY}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Best Practices:** ${BEST_PRACTICES}%" >> $GITHUB_STEP_SUMMARY
            echo "- **SEO:** ${SEO}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Lighthouse results not available" >> $GITHUB_STEP_SUMMARY
          fi