name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type Check
        run: npm run type-check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests with Coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          # Mock environment variables for testing
          NEXT_PUBLIC_WC_API_URL: http://test-api.example.com
          WC_CONSUMER_KEY: test_key
          WC_CONSUMER_SECRET: test_secret
          ADMIN_PASSWORD_HASH: test_password_hash
          JWT_SECRET: test_jwt_secret_that_is_at_least_32_chars_long

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-type-check]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: production
          # Mock environment variables for build
          NEXT_PUBLIC_WC_API_URL: http://build-api.example.com
          WC_CONSUMER_KEY: build_key
          WC_CONSUMER_SECRET: build_secret
          ADMIN_PASSWORD_HASH: build_password_hash
          JWT_SECRET: build_jwt_secret_that_is_at_least_32_chars_long

      - name: Check Build Output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed - no .next directory"
            exit 1
          fi
          echo "Build completed successfully"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next/
            out/
          retention-days: 7

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Analyze Bundle
        run: npm run analyze
        env:
          NODE_ENV: production
          NEXT_PUBLIC_WC_API_URL: http://analyze-api.example.com
          WC_CONSUMER_KEY: analyze_key
          WC_CONSUMER_SECRET: analyze_secret
          ADMIN_PASSWORD_HASH: analyze_password_hash
          JWT_SECRET: analyze_jwt_secret_that_is_at_least_32_chars

      - name: Upload Bundle Analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            .next/analyze/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: npm audit --audit-level=moderate

      - name: Check for Known Vulnerabilities
        run: |
          # Check for high/critical vulnerabilities
          VULN_COUNT=$(npm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "Found $VULN_COUNT high/critical vulnerabilities"
            npm audit
            exit 1
          fi
          echo "No high/critical vulnerabilities found"

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, build, security-audit]
    if: always()

    steps:
      - name: Check Job Results
        run: |
          echo "Lint & Type Check: ${{ needs.lint-and-type-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [[ "${{ needs.lint-and-type-check.result }}" != "success" ]]; then
            echo "‚ùå Lint & Type Check failed"
            exit 1
          fi

          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          fi

          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Build failed"
            exit 1
          fi

          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "‚ùå Security audit failed"
            exit 1
          fi

          echo "‚úÖ All quality checks passed"

  notification:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Notify Success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "üéâ CI pipeline completed successfully for commit ${{ github.sha }}"

      - name: Notify Failure
        if: needs.quality-gate.result != 'success'
        run: |
          echo "‚ùå CI pipeline failed for commit ${{ github.sha }}"
          exit 1