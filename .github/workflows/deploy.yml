name: Deploy Agriko to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  BUILD_PATH: 'out'

jobs:
  # Quality checks job
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production=false
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Cache quality checks
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
          node_modules/.cache
        key: ${{ runner.os }}-quality-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-quality-

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production=false
    
    - name: Build application
      run: npm run build:export
      env:
        NODE_ENV: production
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: ${{ env.BUILD_PATH }}
        retention-days: 1
    
    - name: Generate deployment summary
      run: |
        echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Path:** \`${{ env.BUILD_PATH }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version:** \`${{ env.NODE_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        
        # Count files
        if [ -d "${{ env.BUILD_PATH }}" ]; then
          FILE_COUNT=$(find ${{ env.BUILD_PATH }} -type f | wc -l)
          DIR_SIZE=$(du -sh ${{ env.BUILD_PATH }} | cut -f1)
          echo "- **Files Generated:** $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size:** $DIR_SIZE" >> $GITHUB_STEP_SUMMARY
        fi

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy job
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://shop.agrikoph.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ${{ env.BUILD_PATH }}
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
    
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create backup on server
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          if [ -d '${{ secrets.DEPLOY_PATH }}' ]; then
            sudo cp -r ${{ secrets.DEPLOY_PATH }} ${{ secrets.DEPLOY_PATH }}.backup.\$(date +%Y%m%d-%H%M%S)
            echo '✅ Backup created successfully'
          else
            echo '⚠️  No existing deployment found, skipping backup'
          fi
        "
    
    - name: Deploy files to server
      run: |
        rsync -avz --delete --progress \
          -e "ssh -o StrictHostKeyChecking=no" \
          ${{ env.BUILD_PATH }}/ \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/
    
    - name: Set permissions and reload Apache
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          # Set correct ownership and permissions
          sudo chown -R www-data:www-data ${{ secrets.DEPLOY_PATH }}
          sudo chmod -R 755 ${{ secrets.DEPLOY_PATH }}
          
          # Test Apache configuration
          sudo apache2ctl configtest
          
          # Reload Apache
          sudo systemctl reload apache2
          
          echo '✅ Server configuration updated'
        "
    
    - name: Verify deployment
      run: |
        # Wait for server to be ready
        sleep 5
        
        # Check if site is accessible
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://shop.agrikoph.com || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "✅ Deployment successful! Site is live."
        else
          echo "⚠️  Warning: Site returned HTTP $HTTP_STATUS"
          exit 1
        fi
    
    - name: Create deployment summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://shop.agrikoph.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        
        # Check final status
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://shop.agrikoph.com || echo "000")
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "- **Status:** ✅ Live" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ❌ Error (HTTP $HTTP_STATUS)" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Deployment Failed',
            body: `Deployment to production failed for commit \`${context.sha}\`\n\nWorkflow: ${context.workflow}\nActor: @${context.actor}\nTime: ${new Date().toISOString()}`,
            labels: ['deployment', 'bug']
          });

  # Performance monitoring job (runs after deployment)
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://shop.agrikoph.com
          https://shop.agrikoph.com/about
          https://shop.agrikoph.com/cart
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Comment performance results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          // Performance results will be automatically commented by Lighthouse CI